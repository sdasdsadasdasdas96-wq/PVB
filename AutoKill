--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local task = task

--// Player & Remotes
local player = Players.LocalPlayer
local UseItemRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("UseItem")

-- Wait for character
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

--// Configuration
local IGNORED_NAMES = {
    ["Hotspotini Burrito"] = true,
    ["Rhino Toasterino"] = true,
    ["Ospedale"] = true,
    ["Chef Crabacadabra"] = true,
    ["Dragon Cannelloni"] = true,
    ["Wardenelli Brickatoni"] = true,
    ["Cerberinno Hotdoggino"] = true,
    ["Snailini Discozini"] = true,
    ["Elefante Formaggio"] = true,
    ["Strawberry Camaleonte"] = true
}

local VALID_MUTATIONS = {
    ["Neon"] = true,
    ["Rainbow"] = true,
    ["UpsideDown"] = true,
    ["Galactic"] = true,
    ["Underworld"] = true,
    ["Frozen"] = true,
    ["Magma"] = true,
    ["Ruby"] = true
}

--// Helper: get Frost Grenade tool dynamically
local function getGrenadeTool()
    for _, tool in pairs(character:GetChildren()) do
        if tool:IsA("Tool") and tool.Name:match("^%[x%d+%] Frost Grenade") then
            return tool
        end
    end
    local backpack = player:WaitForChild("Backpack")
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name:match("^%[x%d+%] Frost Grenade") then
            return tool
        end
    end
    return nil
end

--// Equip grenade
local function equipGrenade()
    local tool = getGrenadeTool()
    if tool and tool.Parent ~= character then
        humanoid:EquipTool(tool)
        task.wait(0.1)
    end
    return getGrenadeTool()
end

--// Filtering logic for Brainrots
local function isValidBrainrot(b)
    if not b:IsA("Model") or not b:GetAttribute("Brainrot") then
        return false
    end

    local name = b:GetAttribute("Brainrot")
    local rarity = tostring(b:GetAttribute("Rarity") or "Unknown")
    local mutation = tostring(b:GetAttribute("Mutation") or "None")
    local Health = tonumber(b:GetAttribute("Health")) or 0

    if IGNORED_NAMES[name] then
        return false
    end

    if not VALID_MUTATIONS[mutation] then
        return false
    end

    if rarity == "Secret" then
        return Health > 12500000
    else
        return Health > 5000000
    end
end

--// Gather valid targets
local function getTargetBrainrots()
    local folder = Workspace:WaitForChild("ScriptedMap"):WaitForChild("MissionBrainrots")
    local valid = {}
    for _, b in pairs(folder:GetChildren()) do
        if b.PrimaryPart and isValidBrainrot(b) then
            table.insert(valid, b)
        end
    end
    return valid
end

--// Throw grenade
local function throwGrenade(brainrot)
    local tool = equipGrenade()
    if not tool then
        return false
    end

    local pos = brainrot.PrimaryPart and brainrot.PrimaryPart.Position
    if not pos then
        return false
    end

    local args = {
        {
            Toggle = true,
            Tool = tool,
            Time = 0.0,
            Pos = Vector3.new(pos.X, pos.Y, pos.Z)
        }
    }

    UseItemRemote:FireServer(unpack(args))
    return true
end

--// Main loop
task.spawn(function()
    while true do
        local brainrots = getTargetBrainrots()
        for _, b in pairs(brainrots) do
            if b and b.Parent and getGrenadeTool() then
                throwGrenade(b)
                task.wait(0.05)
            end
        end
        task.wait(0.25)
    end
end)
