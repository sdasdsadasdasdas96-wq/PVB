--// Services
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

--// References
local scriptedMap = Workspace:WaitForChild("ScriptedMap")
local eventFolder = scriptedMap:WaitForChild("Event")
local visualFolder = eventFolder:WaitForChild("HitListVisualizer"):WaitForChild("VisualFolder")
local brainrotsFolder = scriptedMap:WaitForChild("Brainrots")
local talkPrompt = eventFolder:WaitForChild("EventRewards"):WaitForChild("TalkPart"):WaitForChild("ProximityPrompt")

--// ProximityPrompt settings
talkPrompt.MaxActivationDistance = 20
talkPrompt.RequiresLineOfSight = false
print("[DEBUG] ProximityPrompt range set to 10000 studs.")

--// Brainrot order
local brainrotOrder = {
    "Brr Brr Patapim",
    "Cappuccino Assasino",
    "Svinino Bombondino",
    "Trippi Troppi",
    "Bandito Bobrito",
    "Alessio",
    "Bananita Dolphinita",
    "Gangster Footera",
    "Las Tralaleritas",
    "Bambini Crostini",
    "Elefanto Cocofanto",
    "Madung",
    "Bombini Gussini",
    "Bombardiro Crocodilo",
    "Frigo Camelo",
    "Matteo",
    "Giraffa Celeste",
    "Luis Traffico",
    "Kiwissimo",
    "Tralalero Tralala"
}

--// Globals
local running = true

--// Get next brainrot
local function getNextBrainrot(current)
    for i, v in ipairs(brainrotOrder) do
        if v == current then
            return brainrotOrder[i + 1] or brainrotOrder[1]
        end
    end
    return brainrotOrder[1]
end

--// Trigger proximity prompt reliably
local function triggerPrompt()
    pcall(function()
        local char = player.Character or player.CharacterAdded:Wait()
        local hrp = char:WaitForChild("HumanoidRootPart")

        local originalCFrame = hrp.CFrame
        hrp.CFrame = talkPrompt.Parent.CFrame + Vector3.new(0, 3, 0)
        task.wait(0.3)

        talkPrompt:InputHoldBegin()
        task.wait(0.25)
        talkPrompt:InputHoldEnd()

        task.wait(0.15)
        talkPrompt:InputHoldBegin()
        task.wait(0.25)
        talkPrompt:InputHoldEnd()

        hrp.CFrame = originalCFrame
        print("[DEBUG] ‚úÖ Prompt activated successfully.")
    end)
end

--// Wait for new spawn
local function waitForNewSpawn(name)
    print("[DEBUG] Waiting for new spawn of:", name)
    local existing = {}
    for _, m in ipairs(brainrotsFolder:GetChildren()) do
        existing[m] = true
    end

    local model
    while running and not model do
        for _, m in ipairs(brainrotsFolder:GetChildren()) do
            if m:GetAttribute("Brainrot") == name and not existing[m] then
                model = m
                break
            end
        end
        task.wait(0.25)
    end

    if model then
        print("[DEBUG] üß† Spawn detected:", name)
    end
    return model
end

--// Wait for despawn
local function waitForDespawn(model, name)
    if not model then return end
    print("[DEBUG] Waiting for", name, "to disappear...")
    while running and model.Parent do
        task.wait(0.25)
    end
    print("[DEBUG] ‚ùå", name, "despawned.")
end

--// Main monitor for a given brainrot
local function processBrainrot(target)
    local model = waitForNewSpawn(target)
    if not running or not model then return end
    task.wait(0.3)
    triggerPrompt()
    waitForDespawn(model, target)
    task.wait(2)
end

--// Replay purchase
local function purchaseReplay()
    local args = {"purchaseReplay"}
    print("[DEBUG] üíæ Running purchaseReplay event...")
    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CardUpdateEvent"):FireServer(unpack(args))
end

--// Killswitch
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.K then
        running = not running
        print("[DEBUG] Script " .. (running and "resumed ‚úÖ" or "paused ‚õî"))
    end
end)

--// Main loop
task.spawn(function()
    print("[DEBUG] üåÄ Auto-Claim Script started.")
    local lastVisual = nil

    while true do
        task.wait(0.25)
        if not running then continue end

        local visualChildren = visualFolder:GetChildren()
        local currentVisual = (#visualChildren > 0 and visualChildren[1].Name) or lastVisual or brainrotOrder[1]
        lastVisual = currentVisual
        local nextTarget = getNextBrainrot(currentVisual)

        print("[DEBUG] Current visual:", currentVisual)
        print("[DEBUG] Next target:", nextTarget)

        -- Normal process
        processBrainrot(nextTarget)

        -- Special case: after finishing Tralalero ‚Üí wait for Patapim, claim + replay
        if currentVisual == "Tralalero Tralala" then
            print("[DEBUG] ‚öôÔ∏è Special case triggered: Waiting for next cycle (Brr Brr Patapim + purchaseReplay)")
            local brrModel = waitForNewSpawn("Brr Brr Patapim")
            if running and brrModel then
                triggerPrompt()
                purchaseReplay()
                waitForDespawn(brrModel, "Brr Brr Patapim")
                task.wait(3)
            end
        end
    end
end)
